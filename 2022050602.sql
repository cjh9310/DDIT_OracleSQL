-- STORED(오라클 서버의 캐시공간에 미리 저장된) PROCEDURE
-- 업데이트 쌔대여
SELECT PROD_ID,PROD_TOTALSTOCK
FROM   PROD
WHERE  PROD_ID = 'P101000001';


CREATE OR REPLACE PROCEDURE USP_PROD_TOTALSTOCK_UPDATE  -- 컴파일
                                                        -- REPLACE(PROCEDURE 재정의) 
IS                                                      -- USP_PROD_TOTALSTOCK_UPDATE 오버라이드
BEGIN
    UPDATE PROD
    SET    PROD_TOTALSTOCK = PROD_TOTALSTOCK + 10
    WHERE  PROD_ID = 'P101000001';
    DBMS_OUTPUT.PUT_LINE('업데이트 성공!');
    COMMIT;
END;
/
-- EXECUTE USP_PROD_TOTALSTOCK_UPDATE;
EXEC USP_PROD_TOTALSTOCK_UPDATE;  -- 실행(EXEC)
/

SELECT PROD_ID, PROD_NAME, PROD_TOTALSTOCK -- 출력기
FROM   PROD
WHERE  PROD_ID = 'P101000001';



2022-05-09
<학습목표>
1. Stored Procedure 저장 프로시저

2. User Function 사용자 정의함수

<복습>
PL Procedure Language
PL의   5가지 (pusta 버스타)
Package(패키지)
User Function(사용자정의 함수)
Stored Procedure(저장 프로시저)
Trigger(트리거)
Anonymous Block(익명의 블록)


/
CREATE OR REPLACE PROCEDURE USP_PROD_TOTALSTOCK_UPDATE 
(P_PROD_ID IN VARCHAR2,PROD_TOTALSTOCK IN NUMBER) -- 컬럼명 IN (문자,숫자)열
IS                                                    
BEGIN
    UPDATE PROD
    SET    PROD_TOTALSTOCK = PROD_TOTALSTOCK + PROD_TOTALSTOCK
    WHERE  PROD_ID = P_PROD_ID;
    DBMS_OUTPUT.PUT_LINE('업데이트 성공!');
    COMMIT;
END;
/
EXEC USP_PROD_TOTALSTOCK_UPDATE('P101000005',40);
/
SELECT PROD_ID, PROD_NAME, PROD_TOTALSTOCK
FROM   PROD
WHERE  PROD_ID = 'P101000005';
/



-- 회원아이디를 입력받아 이름과 취미를 OUT 매개변수로 처리해보자.
<SQL>
    SELECT MEM_NAME,
           MEM_LIKE
      FROM MEMBER
     WHERE MEM_ID = 'a001';
/    
SET SERVEROUTPUT ON;
/
--<PL/SQL>
DECLARE
    -- SCALAR 변수
    V_NAME VARCHAR2(20);
    -- REFERENCE 변수
    V_LIKE MEMBER.MEM_LIKE%TYPE; -- MEM_LIKE의 자료형
BEGIN
    SELECT MEM_NAME, MEM_LIKE INTO V_NAME, V_LIKE
      FROM MEMBER
     WHERE MEM_ID = 'a001';
     
     DBMS_OUTPUT.PUT_LINE(V_NAME || ', ' || V_LIKE);
END;


CREATE OR REPLACE PROCEDURE USP_GET_MEMBER(P_MEM_ID IN VARCHAR2) --P => 설정 자유
IS
    -- SCALAR 변수
    V_NAME VARCHAR2(20);
    -- REFERENCE 변수
    V_LIKE MEMBER.MEM_LIKE%TYPE; -- MEM_LIKE의 자료형
BEGIN
    SELECT MEM_NAME, MEM_LIKE INTO V_NAME, V_LIKE
      FROM MEMBER
     WHERE MEM_ID = P_MEM_ID;
     
     DBMS_OUTPUT.PUT_LINE(V_NAME || ', ' || V_LIKE);
END;

EXEC USP_GET_MEMBER('b001');


/
CREATE OR REPLACE PROCEDURE USP_GET_MEMBER
(P_MEM_ID IN VARCHAR2, V_NAME OUT VARCHAR2, V_LIKE OUT VARCHAR2) 
-- P_MEM_ID 'b001'가 들어옴    -- EXEC의 MEM_NAME으로  -- EXEC의 MEM_LIKE로
IS
BEGIN
    SELECT MEM_NAME, MEM_LIKE INTO V_NAME, V_LIKE
      FROM MEMBER
     WHERE MEM_ID = P_MEM_ID;
     
     DBMS_OUTPUT.PUT_LINE(V_NAME || ', ' || V_LIKE);
END;
/
-- : => DBMS_OUTPUT.PUT_LINE의 V_NAME이 :MEM_NAME로 들어간다
VAR MEM_NAME VARCHAR2(20)
VAR MEM_LIKE VARCHAR2(20)
EXEC USP_GET_MEMBER('b001', :MEM_NAME, :MEM_LIKE)
PRINT MEM_NAME
PRINT MEM_LIKE;
/

-- 회원별 구매금액의 합SUM(PROD_SLAE+CART_QTY)을 구하는 쿼리를 만들어보자
-- 이 중에서 구매금액의 합이 가장 많은 1명만 출력해보자.
--Alias : MEM_NAME, MEM_AMT
/
SET SERVEROUTPUT ON;
/
    SELECT A.MEM_NAME,
           SUM(B.PROD_SALE*C.CART_QTY) AS MEM_AMT
      FROM MEMBER A, PROD B, CART C
     WHERE C.CART_PROD = PROD_ID
       AND A.MEM_ID = CART_MEMBER
       AND C.CART_NO LIKE '2020%'
     GROUP BY MEM_NAME;
/
-- 이 중에서 구매금액의 합이 가장 많은 1명만 출력해보자. ★ 자주 쓰임
--서브쿼리(메인쿼리 안에 사용된 또 다른 SELECT문)
-- 종류 SELECT -> Scalar
--     FROM -> Inline View
--     WHERE -> Nested


/
CREATE OR REPLACE PROCEDURE USP_MEM_TOP
(P_YEAR IN VARCHAR2, P_MEM_NAME OUT VARCHAR2, P_MEM_AMT OUT NUMBER)
IS
BEGIN
SELECT T.MEM_NAME, T.MEM_AMT INTO P_MEM_NAME,P_MEM_AMT
FROM(
    SELECT A.MEM_NAME,
           SUM(B.PROD_SALE*C.CART_QTY) AS MEM_AMT
      FROM MEMBER A, PROD B, CART C
     WHERE C.CART_PROD = B.PROD_ID
       AND A.MEM_ID = C.CART_MEMBER
       AND C.CART_NO LIKE P_YEAR || '%'
     GROUP BY A.MEM_NAME
     ORDER BY SUM(B.PROD_SALE*C.CART_QTY) DESC
) T
    WHERE ROWNUM <=1;
END;
/
VAR P_MEM_NAME VARCHAR2
VAR P_MEM_AMT NUMBER
EXEC USP_MEM_TOP('2020', :P_MEM_NAME, :P_MEM_AMT)
PRINT P_MEM_NAME 
PRINT P_MEM_AMT;
/
